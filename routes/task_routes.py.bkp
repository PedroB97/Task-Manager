from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify
from ..models.models import Task, Project, Attachment
from .. import db
from datetime import datetime

task_bp = Blueprint('task_bp', __name__)

@task_bp.route('/tasks/new', methods=['POST'])
def create_task():
    project_id = request.form.get('project_id')
    title = request.form.get('title')
    description = request.form.get('description')
    status = request.form.get('status', 'a_fazer')
    due_date_str = request.form.get('due_date')

    if not title or not project_id:
        flash('Título e projeto são obrigatórios', 'error')
        return redirect(url_for('project_bp.view_project', project_id=project_id))

    # Verificar se o projeto existe
    project = Project.query.get_or_404(project_id)

    # Processar data de vencimento se fornecida
    due_date = None
    if due_date_str:
        try:
            due_date = datetime.strptime(due_date_str, '%Y-%m-%d')
        except ValueError:
            flash('Formato de data inválido. Use YYYY-MM-DD', 'error')
            return redirect(url_for('project_bp.view_project', project_id=project_id))

    # Determinar a posição da nova tarefa
    max_position = db.session.query(db.func.max(Task.position)).filter_by(
        project_id=project_id, status=status).scalar() or 0

    task = Task(
        title=title,
        description=description,
        status=status,
        due_date=due_date,
        project_id=project_id,
        position=max_position + 1
    )

    db.session.add(task)
    db.session.commit()

    flash('Tarefa criada com sucesso!', 'success')
    return redirect(url_for('project_bp.view_project', project_id=project_id))

@task_bp.route('/tasks/<int:task_id>', methods=['GET'])
def view_task(task_id):
    task = Task.query.get_or_404(task_id)
    return render_template('tasks/view.html', task=task)

@task_bp.route('/tasks/<int:task_id>/edit', methods=['POST'])
def edit_task(task_id):
    task = Task.query.get_or_404(task_id)

    title = request.form.get('title')
    description = request.form.get('description')
    due_date_str = request.form.get('due_date')

    if not title:
        flash('Título é obrigatório', 'error')
        return redirect(url_for('project_bp.view_project', project_id=task.project_id))

    task.title = title
    task.description = description

    # Processar data de vencimento se fornecida
    if due_date_str:
        try:
            task.due_date = datetime.strptime(due_date_str, '%Y-%m-%d')
        except ValueError:
            flash('Formato de data inválido. Use YYYY-MM-DD', 'error')
    else:
        task.due_date = None

    db.session.commit()

    flash('Tarefa atualizada com sucesso!', 'success')
    return redirect(url_for('project_bp.view_project', project_id=task.project_id))

@task_bp.route('/tasks/<int:task_id>/status', methods=['POST'])
def update_task_status(task_id):
    task = Task.query.get_or_404(task_id)
    new_status = request.form.get('status')

    if new_status not in ['a_fazer', 'em_andamento', 'finalizada']:
        return jsonify({'success': False, 'error': 'Status inválido'}), 400

    # Determinar a posição da tarefa no novo status
    max_position = db.session.query(db.func.max(Task.position)).filter_by(
        project_id=task.project_id, status=new_status).scalar() or 0

    task.status = new_status
    task.position = max_position + 1
    db.session.commit()

    return jsonify({'success': True})

@task_bp.route('/tasks/<int:task_id>/position', methods=['POST'])
def update_task_position(task_id):
    task = Task.query.get_or_404(task_id)
    new_position = request.json.get('position')

    if new_position is None:
        return jsonify({'success': False, 'error': 'Posição não fornecida'}), 400

    task.position = new_position
    db.session.commit()

    return jsonify({'success': True})

@task_bp.route('/tasks/<int:task_id>/delete', methods=['POST'])
def delete_task(task_id):
    task = Task.query.get_or_404(task_id)
    project_id = task.project_id

    db.session.delete(task)
    db.session.commit()

    flash('Tarefa excluída com sucesso!', 'success')
    return redirect(url_for('project_bp.view_project', project_id=project_id))
